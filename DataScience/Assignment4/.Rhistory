plot(x, 1 - (1 - 1/x)^x, xlab = "number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16, xlim = c(1, 100000))
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16, xlim = (1, 20000, 40000, 60000, 80000, 100000))
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16, xlim = [1, 20000, 40000, 60000, 80000, 100000])
?plot
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16, seq(0, 100000,by=20000), main = "Probability distribution for size of bootstrap samples")
?axis
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16,
main = "Probability distribution for size of bootstrap samples")
axis(side = 1, at = seq(0, 100000, by = 20000))
store=rep(NA, 10000)
for(i in 1:10000){ store[i]=sum(sample(1:100, rep = TRUE) == 4) > 0}
mean(store)
install.packages("leap")
install.packages("leaps")
?regsubsets
?regsubsets()
?regsubsets
??regsubsets
>I
?I
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
set.seed(10)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 1
b1 = -1
b2 = -2
b3 = 2
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
model
model_summary
plot(model_summary$bic)
plot(model_summary$adjr2)
set.seed(10)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 2
b1 = 3
b2 = 4
b3 = 5
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
set.seed(5)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = -2
b1 = 3
b2 = 4
b3 = -5
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
set.seed(5)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 10
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
set.seed(5)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 5
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
plot(model_summary$adjr2)
set.seed(15)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 5
b1 = -3
b2 = 2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
plot(model_summary$adjr2)
plot(model_summary$adjr2)
set.seed(15)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 20
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
plot(model_summary$cp)
plot(model_summary$bic)
set.seed(15)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 10
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
set.seed(2)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 10
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
plot(model_summary$cp, type = 1)
plot(model_summary$cp, type = "1")
plot(model_summary$bic, type = "1")
plot(model_summary$adjr2, type = "1")
plot(model_summary$cp, type = "l")
plot(model_summary$bic, type = "l")
plot(model_summary$adjr2, type = "l")
plot(model_summary$bic, type = "l")
coef(model, which.max(model_summary$bic))
coef(model, which.max(model_summary$adjr2))
plot(model_summary$cp, type = "l", col = "firebrick")
plot(model_summary$bic, type = "l", col = "steelblue")
par(new = FALSE)
plot(model_summary$cp, type = "l", col = "firebrick")
plot(model_summary$bic, type = "l", col = "steelblue")
plot(model_summary$adjr2, type = "l")
par(new = TRUE)
plot(model_summary$cp, type = "l", col = "firebrick")
plot(model_summary$bic, type = "l", col = "steelblue")
plot(model_summary$adjr2, type = "l")
par(new = TRUE)
plot(model_summary$cp, type = "l", col = "firebrick")
plot(model_summary$bic, type = "l", col = "steelblue")
plot(model_summary$adjr2, type = "l" col = "spacegrey")
plot(model_summary$adjr2, type = "l", col = "spacegrey")
par(new = TRUE)
plot(model_summary$cp, type = "l", col = "firebrick")
plot(model_summary$bic, type = "l", col = "steelblue")
plot(model_summary$adjr2, type = "l")
set.seed(2)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 10
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp, type = "l", col = "firebrick", xlab = "Number of variables", ylab = "c_p")
readline()
readLine()
plot(model_summary$adjr2, type = "l", xlab = "Number of variables", ylab = "Adjusted R^2")
source('~/Git/Homework/DataScience/Assignment4/Bonus.R')
source('~/Git/Homework/DataScience/Assignment4/Bonus.R')
source('~/Git/Homework/DataScience/Assignment4/Bonus.R')
source('~/Git/Homework/DataScience/Assignment4/Bonus_partB.R')
library(pixmap)
library(ppls)
make_null_rownames = function (xmat) {
xmat = t(xmat)
row.names(xmat) = NULL
return(t(xmat))
}
read_files <- function(face_name) {
name <- paste("faces-corrected/", face_name, sep="")
return(read.pnm(name))
}
extract_pixels <- function(x_i) {
return(c(x_i@grey))
}
face_fnames = list.files("faces-corrected/")
setwd("~/Git/Homework/DataScience/Assignment4")
face_files = list.files("faces-corrected/")
rm(list = ls())
library(pixmap)
library(ppls)
make_null_rownames = function (xmat) {
xmat = t(xmat)
row.names(xmat) = NULL
return(t(xmat))
}
read_files <- function(face_name) {
name <- paste("faces-corrected/", face_name, sep="")
return(read.pnm(name))
}
extract_pixels <- function(x_i) {
return(c(x_i@grey))
}
face_fnames = list.files("faces-corrected/")
x = lapply(face_fnames, read_files)
x = as.array(x)
mat = lapply(x, extract_pixels)
typeof(mat)
mat = as.data.frame(mat)
row.names(mat)
names(mat)
names(mat) = NULL
row.names(mat)
colnames(mat)
mean_mat = rowMeans(mat)
mean_mat = as.data.frame(mean_mat)
for(i in 1:nrow(mat)) {
mat[i,] = mat[i,] - mean_mat[i,1]
}
library(pixmap)
library(ppls)
make_null_rownames = function (xmat) {
xmat = t(xmat)
row.names(xmat) = NULL
return(t(xmat))
}
read_files <- function(face_name) {
name <- paste("faces-corrected/", face_name, sep="")
return(read.pnm(name))
}
extract_pixels <- function(x_i) {
return(c(x_i@grey))
}
face_fnames = list.files("faces-corrected/")
x = lapply(face_fnames, read_files)
x = as.array(x)
mat = lapply(x, extract_pixels)
mat = as.data.frame(mat)
row.names(mat)
mat = make_null_rownames(mat)
row.names(mat)
names(mat)
mean_mat = rowMeans(mat)
mean_mat = as.data.frame(mean_mat)
for(i in 1:nrow(mat)) {
mat[i,] = mat[i,] - mean_mat[i,1]
}
cov_mat = cov(as.matrix(mat))
eigen(cov_mat)$values
eigen(cov_mat)$vectors
eigen_faces <- as.matrix(mat) %*% eigen(cov_mat)$vectors
par(mfrow = c(2,2), oma = c(5,4,0,0) + 0.1, mar = c(0,0,1,1) + 0.1)
for(i in 1:10){
trial <- eigen_faces[,i]
trial <- normalize.vector(trial)
dim(trial) = c(231,195)
plot(pixmapGrey(trial), main=i, xaxs = "i", yaxs="i")
}
rm(list = ls())
library(pixmap)
library(ppls)
read_faces <- function(face_name) {
name <- paste("faces-corrected/", face_name, sep="")
return(read.pnm(name))
}
get_pixels <- function(x_i) {
return(c(x_i@grey))
}
face_files = list.files("faces-corrected/")
faces = lapply(face_files, read_faces)
faces = as.array(faces)
mat = lapply(faces, get_pixels)
mat = as.data.frame(mat)
mat = t(mat)
row.names(mat) = NULL
mat = t(mat)
row.names(mat)
names(mat)
mean_mat = rowMeans(mat)
mean_mat = as.data.frame(mean_mat)
for(i in 1:nrow(mat)) {
mat[i,] = mat[i,] - mean_mat[i,1]
}
cov_mat = cov(as.matrix(mat))
mat_eigen = eigen(cov_mat)
face_vectors = as.matrix(mat) %*% mat_eigen$vectors
op <- par(mfrow = c(4,3),
oma = c(5,4,0,0) + 0.1,
mar = c(0,0,1,1) + 0.1)
for(i in 1:10) {
top_face = face_vectors[,i]
top_face = normalize.vector(top_face)
dim(top_face) = c(231,195)
plot(pixmapGrey(top_face))
}
rm(list = ls())
library(pixmap)
library(ppls)
read_faces <- function(face_name) {
name <- paste("faces-corrected/", face_name, sep="")
return(read.pnm(name))
}
get_pixels <- function(x_i) {
return(c(x_i@grey))
}
face_files = list.files("faces-corrected/")
faces = lapply(face_files, read_faces)
faces = as.array(faces)
mat = lapply(faces, get_pixels)
mat = as.data.frame(mat)
colnames(mat) = NULL
names(mat)
rownames(mat) = NULL
row.names(mat)
rownames(mat)
rownames(mat) = NULL
rownames(mat) <- NULL
rownames(mat)
rownames(mat, do.NULL = TRUE)
row.names(mat)
rm(list = ls())
library(pixmap)
library(ppls)
read_faces <- function(face_name) {
name <- paste("faces-corrected/", face_name, sep="")
return(read.pnm(name))
}
get_pixels <- function(x_i) {
return(c(x_i@grey))
}
normalize_faces <- function(f_row) {
return(f_row - mean(f_row))
}
face_files = list.files("faces-corrected/")
faces = lapply(face_files, read_faces)
faces = as.array(faces)
mat = lapply(faces, get_pixels)
mat = as.data.frame(mat)
mat = lapply(mat, normalize_faces)
typeof(mat)
mat = as.data.frame(mat)
mat[0,1]
mat[1,1]
cov_mat = cov(as.matrix(mat))
mat_eigen = eigen(cov_mat)
face_vectors = as.matrix(mat) %*% mat_eigen$vectors
op <- par(mfrow = c(4,3),
oma = c(5,4,0,0) + 0.1,
mar = c(0,0,1,1) + 0.1)
for(i in 1:10) {
top_face = face_vectors[,i]
top_face = normalize.vector(top_face)
dim(top_face) = c(231,195)
plot(pixmapGrey(top_face))
}
?sweep
rm(list = ls())
library(pixmap)
library(ppls)
read_faces <- function(face_name) {
name <- paste("faces-corrected/", face_name, sep="")
return(read.pnm(name))
}
get_pixels <- function(x_i) {
return(c(x_i@grey))
}
normalize_faces <- function(f_row) {
return(f_row - mean(f_row))
}
face_files = list.files("faces-corrected/")
faces = lapply(face_files, read_faces)
faces = as.array(faces)
mat = lapply(faces, get_pixels)
mat = as.data.frame(mat)
nn = sweep(mat, 1, colMeans(mat))
mat = nn
cov_mat = cov(as.matrix(mat))
mat_eigen = eigen(cov_mat)
face_vectors = as.matrix(mat) %*% mat_eigen$vectors
op <- par(mfrow = c(4,3),
oma = c(5,4,0,0) + 0.1,
mar = c(0,0,1,1) + 0.1)
for(i in 1:10) {
top_face = face_vectors[,i]
top_face = normalize.vector(top_face)
dim(top_face) = c(231,195)
plot(pixmapGrey(top_face))
}
rm(list = ls())
library(pixmap)
library(ppls)
read_faces <- function(face_name) {
name <- paste("faces-corrected/", face_name, sep="")
return(read.pnm(name))
}
get_pixels <- function(x_i) {
return(c(x_i@grey))
}
normalize_faces <- function(f_row) {
return(f_row - mean(f_row))
}
face_files = list.files("faces-corrected/")
faces = lapply(face_files, read_faces)
faces = as.array(faces)
mat = lapply(faces, get_pixels)
mat = as.data.frame(mat)
mean_mat = rowMeans(mat)
typeof(mean_mat)
nn = sweep(mat, 1, mean_mat, "-")
View(nn)
View(mat)
mat = nn
cov_mat = cov(as.matrix(mat))
eigen(cov_mat)$values
eigen(cov_mat)$vectors
mat_eigen = eigen(cov_mat)
face_vectors = as.matrix(mat) %*% mat_eigen$vectors
op <- par(mfrow = c(4,3),
oma = c(5,4,0,0) + 0.1,
mar = c(0,0,1,1) + 0.1)
for(i in 1:10) {
top_face = face_vectors[,i]
top_face = normalize.vector(top_face)
dim(top_face) = c(231,195)
plot(pixmapGrey(top_face))
}
source('~/Git/Homework/DataScience/Assignment4/pasatra_question5b.R')
source('~/Git/Homework/DataScience/Assignment4/pasatra_question5b.R')
