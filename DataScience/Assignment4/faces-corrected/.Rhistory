rm(list=ls())
rm(list=ls())
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
?rnorm
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
plot(population, col=c("blue"), main = "Population Distribution")
hist(population, col=c("blue"), main = "Population Distribution")
sample_statistic = 0
for(i in 1 : no_sample) {
temp = sample(population, sample_size)
sample_statistic[i] = mean(temp);
}
hist(sample_statistic, col=c(blue), main = "Sample Statistic Distribution")
hist(sample_statistic, col=c("blue"), main = "Sample Statistic Distribution")
qqnorm(sample_statistic)
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
hist(sample_statistic, col=c("blue"), main = "Sample Statistic Distribution")
hist(sample_statistic, col=c("blue"), main = "Sample Statistic Distribution",
breaks = c(-4.5, -3.5, -2.5, -1.5, -0.5, 0.5, 1.5, 2.5, 3.5, 4.5))
hist(sample_statistic, col=c("blue"), main = "Sample Statistic Distribution",
breaks = c(0.5))
hist(sample_statistic, col=c("blue"), main = "Sample Statistic Distribution",
breaks = 0.5)
curve(hist(sample_statistic, col=c("blue"), main = "Sample Statistic Distribution"))
?curve
curve(sample_statistic, col=c("blue"), main = "Sample Statistic Distribution")
curve(dnorm(sample_statistic, mean = mean(sample_statistic), sd(sample_statistic)),
col=c("blue"), aadd = TRUE)
hist(sample_statistic, main = "Sampling Distribution", xlim = c(-4.5, 4.5),
col = "lightgreen", freq = FALSE)
curve(dnorm(sample_statistic, mean = mean(sample_statistic), sd(sample_statistic)),
col=c("blue"), aadd = TRUE)
qqnorm(sample_statistic)
?hist
hist(sample_statistic, main = "Sampling Distribution", xlim = c(-4.5, 4.5),
col = "lightgreen")
curve(dnorm(sample_statistic, mean = mean(sample_statistic), sd(sample_statistic)),
col=c("blue"), aadd = TRUE)
hist(sample_statistic, main = "Sampling Distribution", xlim = c(-4.5, 4.5),
col = "lightgreen")
hist(sample_statistic, main = "Sampling Distribution",
col = "lightgreen")
?hist
hist(sample_statistic, main = "Sampling Distribution", xlim = c(-0.45, 0.45), breaks = 10,
col = "lightgreen")
hist(sample_statistic, main = "Sampling Distribution", xlim = c(-0.45, 0.45),
breaks = c(-0.45,-0.35,-0.25,-0.15,-0.05,0.05,0.15,0.25,0.35,0.45),
col = "lightgreen")
curve(dnorm(sample_statistic, mean = mean(sample_statistic), sd(sample_statistic)),
col=c("blue"), aadd = TRUE)
hist(sample_statistic, main = "Sampling Distribution", xlim = c(-0.45, 0.45),
breaks = c(-0.45,-0.35,-0.25,-0.15,-0.05,0.05,0.15,0.25,0.35,0.45),
col = "lightgreen")
curve(dnorm(sample_statistic, mean = mean(sample_statistic), sd(sample_statistic)),
col=c("blue"), add = TRUE)
hist(sample_statistic, main = "Sampling Distribution", xlim = c(-0.45, 0.45),
breaks = c(-0.45,-0.35,-0.25,-0.15,-0.05,0.05,0.15,0.25,0.35,0.45),
col = "lightgreen")
curve(dnorm(x, mean = mean(x), sd(x)),
col=c("blue"), add = TRUE)
qqnorm(sample_statistic)
hist(sample_statistic, main = "Sampling Distribution", xlim = c(-0.45, 0.45),
breaks = c(-0.45,-0.35,-0.25,-0.15,-0.05,0.05,0.15,0.25,0.35,0.45),
col = "lightgreen")
curve(dnorm(x, mean = mean(x), sd(x)),
col=c("blue"), add = TRUE)
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
hist(sample_statistic, main = "Sampling Distribution", xlim = c(-0.45, 0.45),
breaks = c(-0.45,-0.35,-0.25,-0.15,-0.05,0.05,0.15,0.25,0.35,0.45),
col = "lightgreen")
curve(dnorm(x, mean = mean(sample_statistic), sd(sample_statistic)),
col=c("blue"), add = TRUE)
qqnorm(sample_statistic)
?runif
?rexp
?rpois
?rbinom
?rchisq
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
qqnorm(sample_statistic, col = "blue")
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
clear
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
source('~/Git/Homework/DataScience/Assignment2/CLTProof.R')
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x)
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 1.0))
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.5, 0.6, 0.7, 0.8, 0.9, 1.0))
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.5, 1.0))
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = p, pch = 16)
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16)
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16, xlim = c(1, 100000))
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16, xlim = c(1, 100000))
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16, xlim = (1, 20000, 40000, 60000, 80000, 100000))
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16, xlim = [1, 20000, 40000, 60000, 80000, 100000])
?plot
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16, seq(0, 100000,by=20000), main = "Probability distribution for size of bootstrap samples")
?axis
x <- 1:100000
plot(x, 1 - (1 - 1/x)^x, xlab = "Number of bootstrap observations", ylab = "Probability of Selecting jth observation",
ylim = c(0.6, 1.0), col = "firebrick", type = "p", pch = 16,
main = "Probability distribution for size of bootstrap samples")
axis(side = 1, at = seq(0, 100000, by = 20000))
store=rep(NA, 10000)
for(i in 1:10000){ store[i]=sum(sample(1:100, rep = TRUE) == 4) > 0}
mean(store)
install.packages("leap")
install.packages("leaps")
?regsubsets
?regsubsets()
?regsubsets
??regsubsets
>I
?I
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
set.seed(10)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 1
b1 = -1
b2 = -2
b3 = 2
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
model
model_summary
plot(model_summary$bic)
plot(model_summary$adjr2)
set.seed(10)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 2
b1 = 3
b2 = 4
b3 = 5
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
set.seed(5)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = -2
b1 = 3
b2 = 4
b3 = -5
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
set.seed(5)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 10
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
set.seed(5)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 5
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
plot(model_summary$adjr2)
set.seed(15)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 5
b1 = -3
b2 = 2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
plot(model_summary$adjr2)
plot(model_summary$adjr2)
set.seed(15)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 20
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
plot(model_summary$cp)
plot(model_summary$bic)
set.seed(15)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 10
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
set.seed(2)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 10
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp)
plot(model_summary$bic)
plot(model_summary$adjr2)
plot(model_summary$cp, type = 1)
plot(model_summary$cp, type = "1")
plot(model_summary$bic, type = "1")
plot(model_summary$adjr2, type = "1")
plot(model_summary$cp, type = "l")
plot(model_summary$bic, type = "l")
plot(model_summary$adjr2, type = "l")
plot(model_summary$bic, type = "l")
coef(model, which.max(model_summary$bic))
coef(model, which.max(model_summary$adjr2))
plot(model_summary$cp, type = "l", col = "firebrick")
plot(model_summary$bic, type = "l", col = "steelblue")
par(new = FALSE)
plot(model_summary$cp, type = "l", col = "firebrick")
plot(model_summary$bic, type = "l", col = "steelblue")
plot(model_summary$adjr2, type = "l")
par(new = TRUE)
plot(model_summary$cp, type = "l", col = "firebrick")
plot(model_summary$bic, type = "l", col = "steelblue")
plot(model_summary$adjr2, type = "l")
par(new = TRUE)
plot(model_summary$cp, type = "l", col = "firebrick")
plot(model_summary$bic, type = "l", col = "steelblue")
plot(model_summary$adjr2, type = "l" col = "spacegrey")
plot(model_summary$adjr2, type = "l", col = "spacegrey")
par(new = TRUE)
plot(model_summary$cp, type = "l", col = "firebrick")
plot(model_summary$bic, type = "l", col = "steelblue")
plot(model_summary$adjr2, type = "l")
set.seed(2)
x = rnorm(100)
eps = rnorm(100)
# Question 2: Generating response vector Y
# Coefficient values are taken by choice
b0 = 10
b1 = 3
b2 = -2.25
b3 = 0.05
y = b0 + b1 * x + b2 * x^2 + b3 * x^3 + eps
# Question 3: Determining the best model along with some plots as evidence.
library(leaps)
sample_data = data.frame(y, x)
model = regsubsets(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10), data = sample_data)
model_summary = summary(model)
plot(model_summary$cp, type = "l", col = "firebrick", xlab = "Number of variables", ylab = "c_p")
readline()
readLine()
plot(model_summary$adjr2, type = "l", xlab = "Number of variables", ylab = "Adjusted R^2")
source('~/Git/Homework/DataScience/Assignment4/Bonus.R')
source('~/Git/Homework/DataScience/Assignment4/Bonus.R')
source('~/Git/Homework/DataScience/Assignment4/Bonus.R')
source('~/Git/Homework/DataScience/Assignment4/Bonus_partB.R')
setwd("~/Git/Homework/DataScience/Assignment4/faces-corrected")
source('~/Git/Homework/DataScience/Assignment4/pasatra_question5b.R', echo=TRUE)
mat_eigen$values
